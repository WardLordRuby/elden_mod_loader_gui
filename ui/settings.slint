import { GroupBox, Button, Switch, LineEdit } from "std-widgets.slint";
import { MainLogic, SettingsLogic, Page, Formatting } from "common.slint";

export component SettingsPage inherits Page {
    has-back-button: true;
    title: @tr("Settings");
    description: @tr("Set path to eldenring.exe and app settings here");

    VerticalLayout {
        y: 34px;
        height: parent.height - self.y;
        padding-left: Formatting.side-padding;
        alignment: space-between;
        
        GroupBox {
            title: @tr("General");
            height: 70px;
            width: Formatting.group-box-width;
            
            HorizontalLayout {
                padding-top: Formatting.side-padding / 2;
                padding-left: Formatting.side-padding;
                padding-right: Formatting.side-padding;
                Switch {
                    text: @tr("Dark Mode");
                    checked <=> SettingsLogic.dark-mode;
                    toggled => { SettingsLogic.toggle-theme(self.checked) }
                }
                Button {
                    text: @tr("Scan For Mods");
                    icon: @image-url("assets/refresh.png");
                    enabled: MainLogic.game-path-valid;
                    primary: !SettingsLogic.dark-mode;
                    colorize-icon: true;
                    width: 140px;
                    height: 30px;
                    clicked => { SettingsLogic.scan-for-mods() }
                }
            }
        }
        GroupBox {
            title: @tr("Game Path");
            height: 110px;
            width: Formatting.group-box-width;
            
            HorizontalLayout {
                row: 1;
                padding-top: 2px;
                padding-left: Formatting.side-padding;
                
                Text {
                    vertical-alignment: center;
                    horizontal-alignment: left;
                    wrap: word-wrap;
                    text: SettingsLogic.game-path;
                }
            }
            HorizontalLayout {
                row: 2;
                padding-top: Formatting.side-padding + 1px;
                padding-right: Formatting.side-padding;
                spacing: Formatting.button-spacing;
                alignment: end;
                Button { 
                    width: 42px;
                    height: 30px;
                    icon: @image-url("assets/folder.png");
                    colorize-icon: true;
                    primary: !SettingsLogic.dark-mode;
                    clicked => { SettingsLogic.open-game-dir() }
                }
                Button { 
                    width: 105px;
                    height: 30px;
                    primary: !SettingsLogic.dark-mode;
                    text: @tr("Set Path");
                    clicked => { SettingsLogic.select-game-dir() }
                }
            }
        }
        FocusScope {
            key-pressed(event) => {
                if (event.text == Key.Escape) {
                    MainLogic.force-app-focus()
                }
                // && doesn't work in slint conditonal statements
                if (event.text == Key.Tab) {
                    if (load-delay.has-focus) {
                        set-delay.focus()
                    } else {
                        load-delay.focus()
                    }
                }
                accept
            }

            GroupBox {
                title: @tr("Mod Loader Options");
                enabled: SettingsLogic.loader-installed;
                width: Formatting.group-box-width;
                height: 140px;

                HorizontalLayout {
                    row: 1;
                    padding-left: Formatting.side-padding - 2px;
                    Switch {
                        text: @tr("Show Terminal");
                        enabled: SettingsLogic.loader-installed;
                        checked <=> SettingsLogic.show-terminal;
                        toggled => { SettingsLogic.toggle-terminal(self.checked) }
                    }
                }
                HorizontalLayout {
                    row: 2;
                    padding-top: Formatting.side-padding;
                    padding-left: Formatting.side-padding - 2px;
                    Switch {
                        text: @tr("Disable All mods");
                        enabled: SettingsLogic.loader-installed;
                        checked <=> SettingsLogic.loader-disabled;
                        toggled => { SettingsLogic.toggle-all(self.checked) }
                    }
                }
                HorizontalLayout {
                    row: 3;
                    padding-top: Formatting.side-padding + 2px;
                    padding-right: Formatting.side-padding;
                    padding-bottom: Formatting.side-padding / 2;
                    spacing: Formatting.button-spacing;
                    load-delay := LineEdit {
                        width: 132px;
                        height: 30px;
                        horizontal-alignment: right;
                        enabled: SettingsLogic.loader-installed;
                        placeholder-text <=> SettingsLogic.load-delay;
                        text <=> SettingsLogic.delay-input;
                        input-type: number;
                    }
                    set-delay := Button {
                        text: @tr("Set Mod Load Delay");
                        height: 30px;
                        enabled: SettingsLogic.loader-installed;
                        primary: !SettingsLogic.dark-mode;
                        clicked => { 
                            if (load-delay.text != "") {
                                if (load-delay.text.to-float() > 2147483647 ) {
                                    SettingsLogic.delay-input = "2147483647";
                                }
                                SettingsLogic.set-load-delay(SettingsLogic.delay-input)
                            } else {
                                load-delay.focus()
                            }
                        }
                    }
                }
            }
        }
    }
}