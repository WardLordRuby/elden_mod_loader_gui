import { GroupBox, Button, StandardListView, Switch, ComboBox, SpinBox, CheckBox } from "std-widgets.slint";
import { Tab, SettingsLogic, MainLogic, Formatting } from "common.slint";

export component ModDetails inherits Tab {
    in property <int> mod-index;
    property <length> details-height: a.height + b.height + c.height + (3*Formatting.default-spacing);
    VerticalLayout {
        y: 0px;
        padding-top: Formatting.default-padding;
        padding-bottom: Formatting.side-padding / 2;
        padding: Formatting.side-padding;
        spacing: Formatting.default-spacing;
        alignment: start;
    
        a := Text {
            font-size: Formatting.font-size-h3;
            text: @tr("Name:");
        }
        b := HorizontalLayout {
            padding-left: Formatting.side-padding;
            Text {
                font-size: Formatting.font-size-h2;
                wrap: word-wrap;
                text: MainLogic.current-mods[mod-index].name;
            }
        }
        c := Text {
            font-size: Formatting.font-size-h3;
            text: @tr("Files:");
        }
    }
    StandardListView {
        y: details-height;
        height: root.height - details-height - Formatting.side-padding;
        width: Formatting.group-box-width - Formatting.side-padding;
        model: MainLogic.current-mods[mod-index].files;
        item-pointer-event(i, event) => {
            if event.kind == PointerEventKind.up && event.button == PointerEventButton.left {
                MainLogic.edit-config-item(MainLogic.current-mods[mod-index].files[i])
            }
        }
    }
}

export component ModEdit inherits Tab {
    in property <int> mod-index;
    property <bool> update-toggle: true;
    property <bool> has-config: MainLogic.current-mods[mod-index].config-files.length > 0;
    property <int> selected-order: MainLogic.current-mods[mod-index].order.at;
    property <int> selected-index: MainLogic.current-mods[mod-index].order.i;
    property <string> selected-dll: MainLogic.current-mods[mod-index].dll-files[selected-index];
    property <length> button-width: has-config ? 96px : 105px;
    property <LayoutAlignment> button-layout: has-config ? space-between : end;
    VerticalLayout {
        y: 0px;
        padding: Formatting.side-padding;
        padding-bottom: Formatting.side-padding / 2;
        alignment: space-between;

        load-order-box := GroupBox {
            init => { init-selected-index() }
            title: @tr("Load Order");
            enabled: MainLogic.current-mods[mod-index].dll-files.length > 0 && SettingsLogic.loader-installed;

            function init-selected-index() {
                if !MainLogic.current-mods[mod-index].order.set {
                    MainLogic.current-mods[mod-index].order.at = 0;
                    if MainLogic.current-mods[mod-index].dll-files.length != 1 {
                        MainLogic.current-mods[mod-index].order.i = -1;
                    }
                }
            }

            HorizontalLayout {
                row: 1;
                padding-top: Formatting.default-padding;

                function redraw-elements() {
                    update-toggle = false;
                    update-toggle = true;
                }

                load-order := Switch {
                    text: @tr("Set Load Order");
                    enabled: load-order-box.enabled;
                    checked: MainLogic.current-mods[mod-index].order.set;
                    toggled => {
                        // Front end `order.at` is 1 based and back end is 0 based
                        if self.checked {
                            MainLogic.current-mods[mod-index].order.at = MainLogic.max-order + 1;
                        }
                        if selected-index != -1 {
                            if !MainLogic.add-remove-order(self.checked, selected-dll, mod-index, selected-order) {
                                self.checked = !self.checked;
                                MainLogic.force-deserialize()
                            }
                        } else if !self.checked {
                            MainLogic.current-mods[mod-index].order.at = 0
                        }
                        redraw-elements()
                    }
                }
            }
            HorizontalLayout {
                row: 2;
                padding-top: Formatting.side-padding;
                spacing: Formatting.default-spacing;
                
                function modify-file(file: string, i: int) {
                    if file != selected-dll {
                        if !MainLogic.modify-order(file, selected-dll, selected-order, mod-index, i) {
                            init-selected-index();
                            MainLogic.force-deserialize()
                        }
                    }
                    MainLogic.force-app-focus()
                }
                function modify-index(v: int) {
                    if selected-index != -1 {
                        if MainLogic.modify-order(selected-dll, selected-dll, v, mod-index, selected-index) {
                            // can we have the back end handle this logic? impl after sort is taken care of
                            MainLogic.current-mods[mod-index].order.at = v;
                        } else {
                            MainLogic.force-deserialize()
                        }
                    }
                }

                // Might be able to remove this hack after properly having sorting data parsed
                if update-toggle : ComboBox {
                    enabled: load-order.checked && load-order-box.enabled;
                    current-index: selected-index;
                    model: MainLogic.current-mods[mod-index].dll-files;
                    selected(file) => { modify-file(file, self.current-index) }
                }

                // MARK: TODO
                // Create a focus scope to handle up and down arrow inputs
                if update-toggle : SpinBox {
                    width: 106px;
                    enabled: load-order.checked && load-order-box.enabled;
                    minimum: 0;
                    maximum: MainLogic.max-order;
                    value: selected-order;
                    edited(int) => { modify-index(int) }
                }
            }
            VerticalLayout {
                row: 3;
                padding-top: Formatting.default-padding * 2;
                spacing: Formatting.default-spacing;

                Text {
                    visible: load-order.checked && load-order-box.enabled && selected-order == 0;
                    wrap: word-wrap;
                    text: @tr("Mods with a load order of 0 will be loaded instantly. It is recommended to not use 0 unless the mod is absolutely required to have an immediate effect, as race conditions may occur for some types of mods if they load too quickly.");
                }
            }
        }
    
        edit-mod-box := GroupBox {
            title: @tr("Mod Actions");
            height: Formatting.group-box-r1-height;
            HorizontalLayout {
                spacing: Formatting.button-spacing;
                alignment: button-layout;
                Button {
                    width: button-width;
                    height: Formatting.default-element-height;
                    primary: !SettingsLogic.dark-mode;
                    text: @tr("Add Files");
                    clicked => { MainLogic.add-to-mod(mod-index) }
                }
                if has-config : Button {
                    width: button-width;
                    height: Formatting.default-element-height;
                    primary: !SettingsLogic.dark-mode;
                    text: @tr("Edit config");
                    clicked => { MainLogic.edit-config(MainLogic.current-mods[mod-index].config-files) }
                }
                Button {
                    width: button-width;
                    height: Formatting.default-element-height;
                    primary: !SettingsLogic.dark-mode;
                    text: @tr("De-register");
                    clicked => { MainLogic.remove-mod(MainLogic.current-mods[mod-index].name, mod-index) }
                }
            }
        }
    }
}