import { CheckBox, GroupBox, ListView, LineEdit, Button } from "std-widgets.slint";
import { SettingsPage, ModDetailsPage } from "sub-pages.slint";
import { MainLogic, SettingsLogic, Page, ColorPalette, Formatting } from "common.slint";

export component MainPage inherits Page {
    has-back-button: false;
    title: @tr("Mods");
    description: @tr("Edit state of registered mods here");
    // values for live preview editing - This will mess
    // ------------up alignment if left on-------------
    // height: 400px;

    callback focus-line-edit;
    callback focus-settings;
    callback swap-tab;
    callback edit-mod(int);
    focus-line-edit => { input-mod.focus() }
    focus-settings => { app-settings.focus-settings-scope() }
    swap-tab => { mod-settings.current-tab = mod-settings.current-tab == 0 ? 1 : 0 }
    edit-mod(i) => {
        mod-settings.current-tab = 0;
        mod-settings.mod-index = i;
        MainLogic.current-subpage = 2
    }

    VerticalLayout {
        y: 27px;
        height: parent.height - self.y;
        preferred-width: Formatting.app-width;
        padding: Formatting.side-padding;
        padding-bottom: Formatting.side-padding / 2;

        reg-mod-box := GroupBox {
            title: @tr("Registered-Mods:");
            enabled: MainLogic.game-path-valid && !SettingsLogic.loader-disabled;

            list-view := ListView {
                for mod[idx] in MainLogic.current-mods:  re := Rectangle {
                    height: 31px;
                    border-radius: Formatting.rectangle-radius;
                    // ----- ------mod-boxes need to have a max text length-------------
                    // implmented a static way to elide text adding displayname property
                    mod-box := CheckBox {
                        x: -3px;
                        text: mod.displayname;
                        checked: mod.enabled;
                        enabled: reg-mod-box.enabled;
                        toggled => {
                            MainLogic.if-err-bool = self.checked;
                            MainLogic.current-mods[idx].enabled = self.checked;
                            MainLogic.toggleMod(mod.name, self.checked);
                            if (MainLogic.if-err-bool != self.checked) {
                                self.checked = MainLogic.if-err-bool;
                                MainLogic.current-mods[idx].enabled = MainLogic.if-err-bool;
                            }
                        }
                    }
                    im := Image {
                        x: 274px;
                        y: 6px;
                        image-fit: contain;
                        height: 20px;
                        source: @image-url("assets/arrow.png");
                        colorize: ColorPalette.button-image-base;
                        ta := TouchArea {
                            enabled: MainLogic.game-path-valid;
                            x: mod-box.width - 284px;
                            height: 28px;
                            width: root.width - mod-box.width;
                            clicked => { edit-mod(idx) }
                        }
                    }
                    states [
                        hover when ta.has-hover && !ta.pressed: {
                            re.background: ColorPalette.button-background-colors.hovered;
                            im.colorize: ColorPalette.button-image-colors.hovered;
                        }
                        pressed when ta.pressed : {
                            re.background: ColorPalette.button-background-colors.pressed;
                            im.colorize: ColorPalette.button-image-colors.pressed;
                        }
                    ]
                }
            }
        }
        GroupBox {
            height: 85px;
            title: @tr("Add Mod");
            enabled: MainLogic.game-path-valid;
            FocusScope {
                enabled: parent.enabled;
                key-pressed(event) => {
                    if (event.text == Key.Escape) {
                        MainLogic.force-app-focus()
                    }
                    if (event.text == Key.Tab) {
                        input-mod.has-focus ? add-mod.focus() : input-mod.focus()
                    }
                    accept
                }
                HorizontalLayout {
                    spacing: Formatting.button-spacing;
                    input-mod := LineEdit {
                        height: 35px;
                        placeholder-text: @tr("Mod Name");
                        enabled: MainLogic.game-path-valid;
                        text <=> MainLogic.line-edit-text;
                    }
                    add-mod := Button {
                        height: 35px;
                        width: 95px;
                        text: @tr("Select Files");
                        primary: !SettingsLogic.dark-mode;
                        enabled: MainLogic.game-path-valid;
                        clicked => {
                            if(input-mod.text != "") {
                                MainLogic.force-app-focus();
                                MainLogic.select-mod-files(input-mod.text)
                            } else {
                                input-mod.focus();
                            }
                        }
                    }
                }
            }
        }
    }
    app-settings := SettingsPage {
        x: MainLogic.current-subpage == 1 ? 0 : parent.width + parent.x + 2px;
        animate x { duration: 150ms; easing: ease; }
    }
    mod-settings := ModDetailsPage {
        x: MainLogic.current-subpage == 2 ? 0 : parent.width + parent.x + 2px;
        animate x { duration: 150ms; easing: ease; }
    }
}