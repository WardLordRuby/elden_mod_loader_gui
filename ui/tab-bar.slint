import { ColorPalette, Formatting } from "common.slint";

component TabItem inherits Rectangle {
    in property <bool> selected;
    in-out property <string> text <=> label.text;

    callback clicked <=> touch.clicked;

    height: Formatting.tab-bar-height;
    width: Formatting.app-width / 2;
    
    states [
        pressed when touch.pressed : {
            state.opacity: 0.8;
        }
        hover when touch.has-hover : {
            state.opacity: 0.6;
        }
        selected when root.selected : {
            state.opacity: 1;
        }
    ]
    
    state := Rectangle {
        opacity: 0;
        background: ColorPalette.page-background-color;
        border-top-left-radius: 13px;
        border-top-right-radius: 13px;

        animate opacity { duration: 150ms; }
    }

    HorizontalLayout {
        y: (parent.height - self.height) / 2;
        padding: Formatting.default-padding;
        padding-right: 8px;

        label := Text {
            color: ColorPalette.text-foreground-color;
            font-size: Formatting.font-size-h3;
            vertical-alignment: center;
            horizontal-alignment: right;
         }
    }

    touch := TouchArea {
        width: 100%;
        height: 100%;
    }
}

export component TabBar inherits Rectangle {
    in property <[string]> model: [];
    in-out property <int> current-item: 0;
    
    background: ColorPalette.page-background-color.darker(0.16);
    border-top-left-radius: Formatting.rectangle-radius;
    border-top-right-radius: Formatting.rectangle-radius;
    width: Formatting.app-width;
    height: Formatting.tab-bar-height;

    HorizontalLayout {
        padding-top: Formatting.default-padding;
        spacing: Formatting.default-spacing;
        alignment: start;

        navigation := HorizontalLayout {
            alignment: start;
            vertical-stretch: 0;
            for item[index] in root.model : TabItem {
                clicked => { root.current-item = index; }
                text: item;
                selected: index == root.current-item;
            }
        }
    }
}