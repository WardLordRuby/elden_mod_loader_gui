export struct DisplayMod  {
    displayname: string,
    name: string,
    enabled: bool,
    files: string,
    has-config: bool,
    config-files: [string],
}

export enum Message { confirm, deny, esc }

export global MainLogic {
    callback toggleMod(string, bool);
    callback select-mod-files(string);
    callback add-to-mod(string);
    callback remove-mod(string);
    callback edit-config([string]);
    callback force-app-focus();
    callback send-message(Message);
    in property <string> line-edit-text;
    in-out property <bool> if-err-bool;
    in-out property <bool> game-path-valid;
    in-out property <int> current-subpage: 0;
    in-out property <[DisplayMod]> current-mods: [
        {displayname: "Placeholder Name", name: "Placeholder Name", enabled: true, files: "\\placeholder\\path\\data\\really\\long\\paths"},
    ];
}

export global SettingsLogic  {
    callback select-game-dir();
    callback open-game-dir();
    callback scan-for-mods();
    callback toggle-theme(bool);
    callback toggle-terminal(bool);
    callback set-load-delay(string);
    callback toggle-all(bool);
    in property <string> game-path: "C:\\Program Files (x86)\\Steam\\steamapps\\common\\ELDEN RING\\Game";
    in property <bool> loader-installed;
    in-out property <bool> dark-mode: true;
    in-out property <bool> loader-disabled;
    in-out property <bool> show-terminal;
    in-out property <string> load-delay: "5000ms";
    in property <string> delay-input;
}

struct ButtonColors  {
    pressed: color,
    hovered: color,
}

export global ColorPalette  {
    out property <color> page-background-color: SettingsLogic.dark-mode ? #1b1b1b : #60a0a4;
    out property <color> popup-background-color: SettingsLogic.dark-mode ? #00393d : #1b1b1b;
    out property <color> popup-border-color: SettingsLogic.dark-mode ? #17575c : #1b1b1b;

    out property <color> text-foreground-color: #ffffff;
    out property <color> text-base: #aeaeae;
    out property <ButtonColors> text-shade-colors: {
        pressed: SettingsLogic.dark-mode ? root.text-base.darker(30%) : root.text-base.darker(10%),
        hovered: root.text-base.brighter(20%),
    };

    out property <color> button-image-base: SettingsLogic.dark-mode ? #505150 : #aeaeae;
    out property <ButtonColors> button-image-colors: {
        pressed: root.button-image-base.darker(40%),
        hovered: root.button-image-base.brighter(20%),
    };
    out property <color> button-background-base: SettingsLogic.dark-mode ? #4b4b4b83 : #6fc5ffaf;
    out property <ButtonColors> button-background-colors: {
        pressed: root.button-background-base.darker(40%),
        hovered: root.button-background-base.darker(20%),
    };
}

export global Formatting {
    out property <length> app-width: 315px;
    out property <length> app-preferred-height: 381px;
    out property <length> header-height: 48px;
    out property <length> tab-bar-height: 30px;
    out property <length> layout-width: app-width - 10px;
    out property <length> default-padding: 3px;
    out property <length> default-spacing: 3px;
    out property <length> side-spacing: 8px;
    out property <length> button-spacing: 5px;
    out property <length> rectangle-radius: 10px;
    out property <length> group-box-width: app-width - Formatting.side-spacing;
}

export component Page inherits Rectangle {
    in property<string> title: "title";
    in property<string> description: "description";
    in property <bool> has-back-button;
    in property <bool> dark-header;
    width: Formatting.app-width;
    background: dark-header ? ColorPalette.page-background-color.darker(0.16) : ColorPalette.page-background-color;

    callback back;
    callback settings;
    back => { MainLogic.current-subpage = 0 }
    settings => { MainLogic.current-subpage = 1 }

    TouchArea {} // Protect underneath controls

    HorizontalLayout {
        x: 0;
        y: 0;
        height: Formatting.header-height;
        padding-left: 5px;
        padding-right: 8px;
        padding-top: 8px;

        if (root.has-back-button) : HorizontalLayout {
            im1 := Image {
                source: @image-url("assets/back-arrow.png");
                image-fit: contain;
                colorize: ColorPalette.text-foreground-color;
                source-clip-y: -50;
                width: 30px;
                height: 24px;
                
                ta1 := TouchArea {
                    x:0;
                    height: 37px;
                    width: title.width + im1.width;
                    clicked => { root.back() }
                }
            }
            title := Text {
                font-size: 24px;
                max-width: root.width - 10px;
                text: root.title;
                color: ColorPalette.text-foreground-color;
                overflow: elide;
            }

            Rectangle {} // Spacer

            states [
                hover when ta1.has-hover && !ta1.pressed: {
                    title.color: ColorPalette.text-shade-colors.hovered;
                    im1.colorize: ColorPalette.text-shade-colors.hovered;
                }
                pressed when ta1.pressed : {
                    title.color: ColorPalette.text-shade-colors.pressed;
                    im1.colorize: ColorPalette.text-shade-colors.pressed;
                }
            ]
        }
        
        if (!root.has-back-button) : HorizontalLayout {
            Text {
                font-size: 24px;
                max-width: root.width * 0.8;
                text: root.title;
                color: ColorPalette.text-foreground-color;
                overflow: elide;
            }

            Rectangle {} // Spacer

            re := Rectangle {
                width: 33px;
                height: 33px;
                border-radius: 4px;
                im2 := Image {
                    source: @image-url("assets/settings.png");
                    colorize: ColorPalette.button-image-base;
                    width: 28px;
                    image-fit: contain;
                    ta2 := TouchArea {
                        width: 45px;
                        height: 40px;
                        clicked => { root.settings() }
                    }
                }
                states [
                    hover when ta2.has-hover && !ta2.pressed: {
                        re.background: ColorPalette.button-background-colors.hovered;
                        im2.colorize: ColorPalette.button-image-colors.hovered;
                    }
                    pressed when ta2.pressed : {
                        re.background: ColorPalette.button-background-colors.pressed;
                        im2.colorize: ColorPalette.button-image-colors.pressed;
                    }
                ]
            }
        }
    }
    @children
}

export component Tab inherits Rectangle {
    background: ColorPalette.page-background-color;
    width: Formatting.app-width;

    TouchArea {} // Protect underneath controls

    @children
}