import { MainPage } from "main.slint";
import { MainLogic, SettingsLogic, DisplayMod, ColorPalette, Message } from "common.slint";
import { StandardButton } from "std-widgets.slint";

export { MainLogic, SettingsLogic, DisplayMod }

export component App inherits Window {
    in property <string> display-message;
    // property <length> popup-window-y-pos: (mp.height - err-msg-size.height + 30px) / 2; // debug this somehow
    property <length> popup-window-x-pos: {
        // Test use of math functions to fix errors in logic for x and y
        if ((mp.width - err-msg-size.width - 13px) / 2) < 0 {
            10px
        } else {
            (mp.width - err-msg-size.width - 13px) / 2
        }
    };
    title: @tr("Elden Mod Loader");
    icon: @image-url("assets/EML_icon.png");
    preferred-height: 376px;
    min-height: 376px;
    min-width: 315px;
    max-width: 315px;
    
    mp := MainPage {}

    callback focus_app;
    callback show_error_popup;
    callback show_confirm_popup;
    focus_app => { fs.focus() }
    show_error_popup => {
        MainLogic.popup_msg_visible = true;
        err-popup.show()
    }
    show_confirm_popup => {
        MainLogic.confirm_popup_visible = true;
        confirm-popup.show()
    }

    err_msg_size := Text {
        visible: false;
        text: display-message;
        max-width: mp.width - 30px;
    }

    // Make popupWindow look nice 
    err_popup := PopupWindow {
        x: popup-window-x-pos;
        y: 105px;
        height: err-msg-size.height + 20px;
        width: err-msg-size.width + 20px;
        close-on-click: false;
        
        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: 1px;
        }
        
        err_popup_layout := Dialog {
            no-frame: false;
            title: @tr("Error");
            
            Text {
                text: display-message;
                max-width: mp.width - 30px;
                wrap: word-wrap;
            }

            StandardButton {
                kind: ok; 
                clicked => { 
                    MainLogic.popup_msg_visible = false;
                    err-popup.close()
                }
            }
        }
    }
        // Make popupWindow look nice 
        confirm_popup := PopupWindow {
            x: popup-window-x-pos;
            y: 105px;
            height: confirm-popup-text.height + 20px;
            width: confirm-popup-text.width + 20px;
            close-on-click: false;
    
            Rectangle {
                background: ColorPalette.popup-background-color;
                border-color: ColorPalette.popup-border-color;
                border-width: 1px;
            }
    
            confirm_popup_layout := Dialog {
                no-frame: false;
                title: @tr("Confirm");
                
                confirm_popup_text := Text {
                    text: display-message;
                    max-width: mp.width - 30px;
                    wrap: word-wrap;
                }
                StandardButton {
                    kind: ok; 
                    clicked => { 
                        MainLogic.send_message(Message.confirm);
                        confirm-popup.close()
                    }
                }
                StandardButton {
                    kind: cancel; 
                    clicked => { 
                        MainLogic.send_message(Message.deny);
                        confirm-popup.close()
                    }
                }
            }
        }
    fs := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Escape) {
                if (MainLogic.popup_msg_visible) {
                    MainLogic.popup_msg_visible = false;
                    err-popup.close()
                } else if (MainLogic.confirm_popup_visible) {
                    MainLogic.confirm_popup_visible = false;
                    MainLogic.send_message(Message.esc);
                    confirm-popup.close()
                } else {
                    MainLogic.current-subpage = 0
                }
            }
            if (event.text == Key.Tab) {
                mp.focus_line_edit()
            }
            accept
        }
    }
}