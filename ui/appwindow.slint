import { MainPage } from "main.slint";
import { MainLogic, SettingsLogic, DisplayMod, ColorPalette, Message, Formatting } from "common.slint";
import { StandardButton } from "std-widgets.slint";

export { MainLogic, SettingsLogic, DisplayMod }

export component App inherits Window {
    in property <string> display-message;
    in property <bool> alt-std-buttons;
    property <bool> popup-visible;
    // popup-window-height = text-height + (standard-button-height + distance between text and button) + dialog boarder
    property <length> popup-window-height: msg-size.height + 39px + 13px;
    // popup-window-width = text-width + dialog boarder
    property <length> popup-window-width: msg-size.width + 13px;
    // window-height = main-page-height -? page-title-height
    property <length> window-height: mp.height - Formatting.header-height;
    property <length> popup-border-width: 1px;
    property <length> popup-window-x-pos: {
        if ((mp.width - popup-window-width) / 2) < Formatting.side-padding - (popup-border-width * 2) {
            Formatting.side-padding - (popup-border-width * 2)
        } else {
            ((mp.width - popup-window-width) / 2) - (popup-border-width * 2)
        }
    };
    property <length> popup-window-y-pos: {
        if ((window-height - popup-window-height) / 2) < 0px {
            60px
        } else {
            (window-height - popup-window-height) / 2
        }
    };
    property <length> max-text-width: mp.width - 28px;
    property <length> max-popup-width: mp.width - 14px;
    property <length> popup-height: msg-size.height + 20px;
    property <length> popup-width: {
        if msg-size.width + 20px < max-popup-width {
            msg-size.width + 20px
        } else {
            max-popup-width
        }
    };
    // property <length> debug-mp-height: mp.height;
    // property <length> debug-msg-height: popup-window-height;
    // property <string> debug-msg: "height calc: " + popup-window-y-pos / 1px + "\nPage Height: " + debug-mp-height / 1px + "\nDialog Height: " + popup-window-height / 1px;
    title: @tr("Elden Mod Loader");
    icon: @image-url("assets/EML-icon.png");
    preferred-height: Formatting.app-preferred-height;
    min-height: Formatting.app-preferred-height;
    min-width: Formatting.app-width;
    max-width: Formatting.app-width;
    
    callback focus-app;
    callback show-error-popup;
    callback show-confirm-popup;
    callback update-mod-index(int, int);
    callback redraw-checkboxes;

    redraw-checkboxes => { mp.redraw-checkboxes() }
    update-mod-index(i, t) => { mp.update-mod-index(i, t) }
    focus-app => { fs.focus() }
    show-error-popup => {
        popup-visible = true;
        err-popup.show()
    }
    show-confirm-popup => {
        popup-visible = true;
        alt-std-buttons ? confirm-popup-2.show() : confirm-popup.show()
    }
    
    mp := MainPage {}

    msg-size := Text {
        visible: false;
        text: display-message;
        max-width: max-text-width;
    }

    err-popup := PopupWindow {
        x: popup-window-x-pos;
        y: popup-window-y-pos;
        height: popup-height;
        width: popup-width;
        close-policy: close-on-click;
        
        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: popup-border-width;
        }
        
        Dialog {
            no-frame: false;
            title: @tr("Error");
            
            Text {
                text: display-message;
                max-width: max-text-width;
                wrap: word-wrap;
            }

            StandardButton {
                kind: ok; 
                clicked => { 
                    popup-visible = false;
                    MainLogic.send-message(Message.esc);
                    err-popup.close()
                }
            }
        }
    }

    confirm-popup := PopupWindow {
        x: popup-window-x-pos;
        y: popup-window-y-pos;
        height: popup-height;
        width: popup-width;
        close-policy: close-on-click;

        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: popup-border-width;
        }

        Dialog {
            no-frame: false;
            title: @tr("Confirm");
            
            Text {
                text: display-message;
                max-width: max-text-width;
                wrap: word-wrap;
            }
            StandardButton {
                kind: yes; 
                clicked => { 
                    MainLogic.send-message(Message.confirm);
                    confirm-popup.close()
                }
            }
            StandardButton {
                kind: cancel; 
                clicked => { 
                    MainLogic.send-message(Message.deny);
                    confirm-popup.close()
                }
            }
        }
    }
    confirm-popup-2 := PopupWindow {
        x: popup-window-x-pos;
        y: popup-window-y-pos;
        height: popup-height;
        width: popup-width;
        close-policy: close-on-click;

        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: popup-border-width;
        }

        Dialog {
            no-frame: false;
            title: @tr("Confirm");
            
            Text {
                text: display-message;
                max-width: max-text-width;
                wrap: word-wrap;
            }
            StandardButton {
                kind: yes; 
                clicked => { 
                    MainLogic.send-message(Message.confirm);
                    confirm-popup-2.close()
                }
            }
            StandardButton {
                kind: no; 
                clicked => { 
                    MainLogic.send-message(Message.deny);
                    confirm-popup-2.close()
                }
            }
        }
    }
    fs := FocusScope {
        key-pressed(event) => {
            if event.text == Key.Escape {
                if popup-visible {
                    popup-visible = false;
                    MainLogic.send-message(Message.esc);
                    err-popup.close();
                    confirm-popup.close();
                    confirm-popup-2.close()
                } else {
                    MainLogic.current-subpage = 0
                }
            }
            if event.text == Key.Tab {
                if !popup-visible {
                    if MainLogic.current-subpage == 0 {
                        if (MainLogic.game-path-valid) {
                            mp.focus-line-edit()
                        }
                    } else if MainLogic.current-subpage == 1 {
                        if (SettingsLogic.loader-installed) {
                            mp.focus-settings()
                        }
                    } else if MainLogic.current-subpage == 2 {
                        mp.swap-tab()
                    }
                }
            }
            accept
        }
    }
}