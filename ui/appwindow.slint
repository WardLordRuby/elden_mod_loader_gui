import { MainPage } from "main.slint";
import { MainLogic, SettingsLogic, DisplayMod, ColorPalette, Message } from "common.slint";
import { StandardButton } from "std-widgets.slint";

export { MainLogic, SettingsLogic, DisplayMod }

export component App inherits Window {
    in property <string> display-message;
    in property <bool> alt-std-buttons;
    property <bool> popup-msg-visible;
    property <bool> confirm-popup-visible;
    // property <length> popup-window-y-pos: (mp.height - err-msg-size.height + 30px) / 2; // debug this somehow
    property <length> popup-window-x-pos: {
        // Test use of math functions to fix errors in logic for x and y
        if ((mp.width - msg-size.width - 13px) / 2) < 10px {
            10px
        } else {
            (mp.width - msg-size.width - 13px) / 2
        }
    };
    title: @tr("Elden Mod Loader");
    icon: @image-url("assets/EML-icon.png");
    preferred-height: 376px;
    min-height: 376px;
    min-width: 315px;
    max-width: 315px;
    
    mp := MainPage {}

    callback focus-app;
    callback show-error-popup;
    callback show-confirm-popup;
    focus-app => { fs.focus() }
    show-error-popup => {
        popup-msg-visible = true;
        err-popup.show()
    }
    show-confirm-popup => {
        confirm-popup-visible = true;
        if (!alt-std-buttons) {
            confirm-popup.show()
        } else {
            confirm-popup-2.show()
        }
    }

    msg-size := Text {
        visible: false;
        text: display-message;
        max-width: mp.width - 30px;
    }

    // Make popupWindow look nice 
    err-popup := PopupWindow {
        x: popup-window-x-pos;
        y: 105px;
        height: msg-size.height + 20px;
        width: msg-size.width + 20px;
        close-on-click: false;
        
        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: 1px;
        }
        
        Dialog {
            no-frame: false;
            title: @tr("Error");
            
            Text {
                text: display-message;
                max-width: mp.width - 30px;
                wrap: word-wrap;
            }

            StandardButton {
                kind: ok; 
                clicked => { 
                    popup-msg-visible = false;
                    err-popup.close()
                }
            }
        }
    }
    // Make popupWindow look nice 
    confirm-popup := PopupWindow {
        x: popup-window-x-pos;
        y: 105px;
        height: msg-size.height + 20px;
        width: msg-size.width + 20px;
        close-on-click: false;

        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: 1px;
        }

        Dialog {
            no-frame: false;
            title: @tr("Confirm");
            
            Text {
                text: display-message;
                max-width: mp.width - 30px;
                wrap: word-wrap;
            }
            StandardButton {
                kind: yes; 
                clicked => { 
                    MainLogic.send-message(Message.confirm);
                    confirm-popup.close()
                }
            }
            StandardButton {
                kind: cancel; 
                clicked => { 
                    MainLogic.send-message(Message.deny);
                    confirm-popup.close()
                }
            }
        }
    }
    confirm-popup-2 := PopupWindow {
        x: popup-window-x-pos;
        y: 105px;
        height: msg-size.height + 20px;
        width: msg-size.width + 20px;
        close-on-click: false;

        Rectangle {
            background: ColorPalette.popup-background-color;
            border-color: ColorPalette.popup-border-color;
            border-width: 1px;
        }

        Dialog {
            no-frame: false;
            title: @tr("Confirm");
            
            Text {
                text: display-message;
                max-width: mp.width - 30px;
                wrap: word-wrap;
            }
            StandardButton {
                kind: yes; 
                clicked => { 
                    MainLogic.send-message(Message.confirm);
                    confirm-popup-2.close()
                }
            }
            StandardButton {
                kind: no; 
                clicked => { 
                    MainLogic.send-message(Message.deny);
                    confirm-popup-2.close()
                }
            }
        }
    }
    fs := FocusScope {
        key-pressed(event) => {
            if (event.text == Key.Escape) {
                if (popup-msg-visible) {
                    popup-msg-visible = false;
                    err-popup.close()
                } else if (confirm-popup-visible) {
                    confirm-popup-visible = false;
                    MainLogic.send-message(Message.esc);
                    confirm-popup.close();
                    confirm-popup-2.close()
                } else {
                    MainLogic.current-subpage = 0
                }
            }
            if (event.text == Key.Tab) {
                mp.focus-line-edit()
            }
            accept
        }
    }
}